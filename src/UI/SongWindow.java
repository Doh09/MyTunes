/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import UI.Verifier.TextVerifier;
import UI.Verifier.TimeVerifier;
import BE.Song;
import BLL.MyTunesException;
import BLL.Time;
import BLL.ModelMyTunes;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Dennis, Alex, Niels and Tim.
 */
public class SongWindow extends javax.swing.JDialog {

    /**
     * Static and finals.
     */
    private static final String EXTIONS_DESCCRIPTION = "MP3 files";
    private static final String[] EXTENTIONS_ALLOWED = {".mp3"};
    
    /**
     * Instance variables.
     */
    private final boolean edit;
    private final ModelMyTunes model;
    private Song song;
    
    /**
     * Creates new form NewSongWindow
     * @param parent
     * @param modal
     * @param edit - True if the window should edit the selected song.
     * @param model - Model of mytunes.
     */
    public SongWindow(java.awt.Frame parent, boolean modal, boolean edit, ModelMyTunes model) {
        super(parent, modal);
        initComponents();
        
        //Set default values of instance variables.
        this.edit = edit;
        this.model = model;
        
        //Set filter on fields.
        titleTxt.setInputVerifier(new TextVerifier());
        artistTxt.setInputVerifier(new TextVerifier());
        timeTxt.setInputVerifier(new TimeVerifier());
        
        //Allow dialog to close if input verifiers fails.
        cancelBtn.setVerifyInputWhenFocusTarget(false);
        
        //Check we are in edit mode or not.
        if (edit) {
            
            //Set title.
            setTitle("Edit song...");
            
            //Set default values to text fields if song is given.
            Song selectedSong = model.getSelectedSong();
            titleTxt.setText(selectedSong.getTitle());
            artistTxt.setText(selectedSong.getArtistName());
            timeTxt.setText(selectedSong.getTime().toString());
            fileTxt.setText(selectedSong.getPath());
            
        } else {
            
            //Set title.
            setTitle("Add song...");
        }
        
        //Update the combox with genres.
        updateCombobox();
    }

    /**
     * Updates the combox with genres in the window.
     */
    private void updateCombobox() {
        try{
            
            //Get all genres mytunes knows.
            List<String> genrer = model.getAllGenres();
            categoryCombo.setModel(new javax.swing.DefaultComboBoxModel(genrer.toArray()));
        
        }catch(MyTunesException ex){
            
            //Display error message.
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLbl = new javax.swing.JLabel();
        titleTxt = new javax.swing.JTextField();
        artistLbl = new javax.swing.JLabel();
        artistTxt = new javax.swing.JTextField();
        categoryLbl = new javax.swing.JLabel();
        categoryCombo = new javax.swing.JComboBox();
        moreBtn = new javax.swing.JButton();
        timeLbl = new javax.swing.JLabel();
        timeTxt = new javax.swing.JTextField();
        fileLbl = new javax.swing.JLabel();
        fileTxt = new javax.swing.JTextField();
        chooseBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add new song...");
        setResizable(false);

        titleLbl.setText("Title:");

        titleTxt.setMaximumSize(new java.awt.Dimension(240, 2147483647));
        titleTxt.setMinimumSize(new java.awt.Dimension(240, 20));

        artistLbl.setText("Artist:");

        categoryLbl.setText("Category:");

        categoryCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        moreBtn.setText("More");
        moreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreBtnActionPerformed(evt);
            }
        });

        timeLbl.setText("Time:");

        timeTxt.setEditable(false);
        timeTxt.setEnabled(false);

        fileLbl.setText("File:");

        fileTxt.setEditable(false);
        fileTxt.setFocusable(false);
        fileTxt.setMaximumSize(new java.awt.Dimension(240, 2147483647));
        fileTxt.setMinimumSize(new java.awt.Dimension(240, 20));

        chooseBtn.setText("Choose...");
        chooseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fileLbl)
                            .addComponent(timeLbl)
                            .addComponent(categoryLbl)
                            .addComponent(artistLbl)
                            .addComponent(titleLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(titleTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                .addComponent(artistTxt))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(timeTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(categoryCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, 110, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(moreBtn))
                            .addComponent(fileTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveBtn)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLbl)
                    .addComponent(titleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(artistLbl)
                    .addComponent(artistTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(categoryLbl)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(moreBtn)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLbl)
                    .addComponent(timeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLbl)
                    .addComponent(fileTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(cancelBtn))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseBtnActionPerformed
        
        //Create a JFileChooser to allow the user to choose a file.
        JFileChooser fileChooser = new JFileChooser();
        
        //Add filter.
        SongFileFilter filefilter = new SongFileFilter(EXTENTIONS_ALLOWED, EXTIONS_DESCCRIPTION);
        fileChooser.addChoosableFileFilter(filefilter);
        fileChooser.setFileFilter(filefilter);
        //Show the file chooser dialog.
        int result = fileChooser.showOpenDialog(this);
        
        //Check result.
        if (result == JFileChooser.APPROVE_OPTION) {
            
            fileTxt.setText(fileChooser.getSelectedFile().getPath());
            timeTxt.setText(new Time(model.loadASong(fileChooser.getSelectedFile().getPath(), "duration")).toString());
        }
    }//GEN-LAST:event_chooseBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        
        //Close dialog.
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        
        TextVerifier txtVerifier = new TextVerifier();
        TimeVerifier timeVerifier = new TimeVerifier();
        
        //Verify the input in the input fields, if one of the verifiers fails
        //it will automaticly focus on the fiels which not is valid.
        if (!txtVerifier.verify(titleTxt)
                || !txtVerifier.verify(artistTxt)
                || !timeVerifier.verify(timeTxt))
            return;

        //Input fields is validated succesfully.
        //Get different field values.
        String title = titleTxt.getText().trim();
        String artistName = artistTxt.getText().trim();
        String category = (String) categoryCombo.getSelectedItem();
        Time time = new Time(timeTxt.getText());
        String file = fileTxt.getText();
        
        //Check if we are in edit mode.
        if (edit) {
            
            //Get selected song.
            Song selectedSong = model.getSelectedSong();
            
            //Copy id from the old song object to the new one.
            song = new Song(selectedSong.getId(),
                            title,
                            category,
                            artistName,
                            time,
                            file); 
        } else {
            //Create new song object.
            song = new Song(title, category, artistName, time, file);
        }
        
        dispose();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void moreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreBtnActionPerformed
        
        //Add genre to MyTune.
        GenreWindow genreWindow = new GenreWindow(null, true, model);
        genreWindow.setVisible(true);
        
        updateCombobox();
    }//GEN-LAST:event_moreBtnActionPerformed
    
    /**
     * Gets the resulting song after displaying the dialog.
     * @return the song that is created from the user input.
     */
    public Song getSong() {
        return song;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel artistLbl;
    private javax.swing.JTextField artistTxt;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JComboBox categoryCombo;
    private javax.swing.JLabel categoryLbl;
    private javax.swing.JButton chooseBtn;
    private javax.swing.JLabel fileLbl;
    private javax.swing.JTextField fileTxt;
    private javax.swing.JButton moreBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JLabel timeLbl;
    private javax.swing.JTextField timeTxt;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JTextField titleTxt;
    // End of variables declaration//GEN-END:variables
}
