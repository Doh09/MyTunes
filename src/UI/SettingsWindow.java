/**
 * SettingsWindow. A modal window that presents a variety of settings the user
 * can adjust. These settings can be saved or discarded, depending on whether
 * the user clicks Save or Cancel. The settings are saved directly to the
 * Settings class.
 */
package UI;

import BLL.ModelMyTunes;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Dennis, Alex, Niels and Tim.
 */
public class SettingsWindow extends javax.swing.JDialog
{

    private ModelMyTunes model;
    
    /**
     * Construct the SettingsWindow and have its components display correctly.
     *
     * @param parent
     * @param modal
     */
    public SettingsWindow(java.awt.Frame parent, boolean modal, ModelMyTunes model)
    {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.model = model;
            //eventuelt lave en conditions metode så koden er mere overskuelig, i stedet for lange if-sætninger.
            if (model.getSetting("WINDOW_STARTUP") != null && model.getSetting("WINDOW_STARTUP").equalsIgnoreCase("True"))
            {
                chbxWindowStartup.setSelected(true);
            }
            if (model.getSetting("SONGDELETION_CONFIRMATION") != null && model.getSetting("SONGDELETION_CONFIRMATION").equalsIgnoreCase("True"))
            {
                chbxSongDeletionConfirmation.setSelected(true);
                if (model.getSetting("SONGDELETIONHDDYes_CONFIRMATION") != null && model.getSetting("SONGDELETIONHDDYes_CONFIRMATION").equalsIgnoreCase("True"))
                {
                    chbxSongDeletionConfirmationHDDYes.setSelected(true);
                }
                if (model.getSetting("SONGDELETIONHDDNo_CONFIRMATION") != null && model.getSetting("SONGDELETIONHDDNo_CONFIRMATION").equalsIgnoreCase("True"))
                {
                    chbxSongDeletionConfirmationHDDNo.setSelected(true);
                }
            }
            if (model.getSetting("SYNCHRONIZE_ACTIVATED") != null && model.getSetting("SYNCHRONIZE_ACTIVATED").equalsIgnoreCase("True"))
            {
                chbxSynchronize.setSelected(true);
            }
            txtDefaultMDirectory.setText(model.getSetting("DEFAULT_DIRECTORY"));

        
        btnSave.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlSettings = new javax.swing.JPanel();
        chbxWindowStartup = new javax.swing.JCheckBox();
        chbxSongDeletionConfirmation = new javax.swing.JCheckBox();
        txtDefaultMDirectory = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lblProgramStartup = new javax.swing.JLabel();
        lblMusicSettings = new javax.swing.JLabel();
        btnSelectDirectory = new javax.swing.JButton();
        lblDefaultDirectory = new javax.swing.JLabel();
        chbxSongDeletionConfirmationHDDYes = new javax.swing.JCheckBox();
        lblOption4 = new javax.swing.JLabel();
        chbxSongDeletionConfirmationHDDNo = new javax.swing.JCheckBox();
        lblOption5 = new javax.swing.JLabel();
        chbxSynchronize = new javax.swing.JCheckBox();
        lblSongDeletion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings window");
        setResizable(false);

        pnlSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        chbxWindowStartup.setText("Window maximized");
        chbxWindowStartup.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbxWindowStartupActionPerformed(evt);
            }
        });

        chbxSongDeletionConfirmation.setText("Delete songs without asking for confirmation");
        chbxSongDeletionConfirmation.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                chbxSongDeletionConfirmationStateChanged(evt);
            }
        });
        chbxSongDeletionConfirmation.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                chbxSongDeletionConfirmationItemStateChanged(evt);
            }
        });
        chbxSongDeletionConfirmation.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbxSongDeletionConfirmationActionPerformed(evt);
            }
        });

        txtDefaultMDirectory.setEditable(false);
        txtDefaultMDirectory.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtDefaultMDirectoryActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSaveActionPerformed(evt);
            }
        });

        lblProgramStartup.setText("-- Program startup --");

        lblMusicSettings.setText("-- Music settings --");

        btnSelectDirectory.setText("...");
        btnSelectDirectory.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSelectDirectoryActionPerformed(evt);
            }
        });

        lblDefaultDirectory.setText("Default directory to add music from");

        chbxSongDeletionConfirmationHDDYes.setText("Automatically reply yes to deleting song from harddisk.");
        chbxSongDeletionConfirmationHDDYes.setEnabled(false);
        chbxSongDeletionConfirmationHDDYes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbxSongDeletionConfirmationHDDYesActionPerformed(evt);
            }
        });

        lblOption4.setText("-");

        chbxSongDeletionConfirmationHDDNo.setText("Automatically reply no to deleting song from harddisk.");
        chbxSongDeletionConfirmationHDDNo.setEnabled(false);
        chbxSongDeletionConfirmationHDDNo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbxSongDeletionConfirmationHDDNoActionPerformed(evt);
            }
        });

        lblOption5.setText("-");

        chbxSynchronize.setText("Automatically synchronize the default music folder with MyTunes (beta functionality, use with caution)");
        chbxSynchronize.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbxSynchronizeActionPerformed(evt);
            }
        });

        lblSongDeletion.setText("- Song deletion -");

        javax.swing.GroupLayout pnlSettingsLayout = new javax.swing.GroupLayout(pnlSettings);
        pnlSettings.setLayout(pnlSettingsLayout);
        pnlSettingsLayout.setHorizontalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSettingsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProgramStartup)
                            .addComponent(chbxWindowStartup))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSettingsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSettingsLayout.createSequentialGroup()
                                .addComponent(btnCancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSave))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblMusicSettings)
                                .addGroup(pnlSettingsLayout.createSequentialGroup()
                                    .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblDefaultDirectory)
                                        .addComponent(txtDefaultMDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(pnlSettingsLayout.createSequentialGroup()
                                            .addGap(21, 21, 21)
                                            .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblOption5)
                                                .addGroup(pnlSettingsLayout.createSequentialGroup()
                                                    .addComponent(lblOption4)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(chbxSongDeletionConfirmationHDDNo)
                                                        .addComponent(chbxSongDeletionConfirmationHDDYes)))))
                                        .addComponent(chbxSongDeletionConfirmation)
                                        .addComponent(chbxSynchronize))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnSelectDirectory))))))
                .addContainerGap())
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSongDeletion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlSettingsLayout.setVerticalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addComponent(lblProgramStartup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbxWindowStartup)
                .addGap(18, 18, 18)
                .addComponent(lblMusicSettings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDefaultDirectory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectDirectory)
                    .addComponent(txtDefaultMDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbxSynchronize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSongDeletion)
                .addGap(4, 4, 4)
                .addComponent(chbxSongDeletionConfirmation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbxSongDeletionConfirmationHDDYes)
                    .addComponent(lblOption4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbxSongDeletionConfirmationHDDNo)
                    .addComponent(lblOption5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Disposes of the settingsWindow without changing the settings.
     *
     * @param evt
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        //Close dialog.
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * Saves the settings and then disposes of the settingsWindow.
     *
     * @param evt
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //WINDOW_STARTUP setting
        if (chbxWindowStartup.isSelected())
        {
            model.setSetting("WINDOW_STARTUP", "True");
        }
        else
        {
            model.setSetting("WINDOW_STARTUP", "false");
        }

        //SONGDELETION_CONFIRMATION setting
        if (chbxSongDeletionConfirmation.isSelected())
        {
            model.setSetting("SONGDELETION_CONFIRMATION", "True");
        }
        else
        {
            model.setSetting("SONGDELETION_CONFIRMATION", "false");
        }

        //SONGDELETIONHDDYes_CONFIRMATION setting
        if (chbxSongDeletionConfirmationHDDYes.isSelected())
        {
            model.setSetting("SONGDELETIONHDDYes_CONFIRMATION", "True");
        }
        else
        {
            model.setSetting("SONGDELETIONHDDYes_CONFIRMATION", "false");
        }

        //SONGDELETIONHDDNo_CONFIRMATION setting
        if (chbxSongDeletionConfirmationHDDNo.isSelected())
        {
            model.setSetting("SONGDELETIONHDDNo_CONFIRMATION", "True");
        }
        else
        {
            model.setSetting("SONGDELETIONHDDNo_CONFIRMATION", "false");
        }

        //SYNCHRONIZE_ACTIVATED setting
        if (chbxSynchronize.isSelected())
        {
            model.setSetting("SYNCHRONIZE_ACTIVATED", "True");
        }
        else
        {
            model.setSetting("SYNCHRONIZE_ACTIVATED", "false");
        }

        //DEFAULT_DIRECTORY setting
        model.setSetting("DEFAULT_DIRECTORY", txtDefaultMDirectory.getText());

        //close the window
        dispose();

    }//GEN-LAST:event_btnSaveActionPerformed

    private void chbxWindowStartupActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbxWindowStartupActionPerformed
    {//GEN-HEADEREND:event_chbxWindowStartupActionPerformed
    }//GEN-LAST:event_chbxWindowStartupActionPerformed

    private void txtDefaultMDirectoryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtDefaultMDirectoryActionPerformed
    {//GEN-HEADEREND:event_txtDefaultMDirectoryActionPerformed
    }//GEN-LAST:event_txtDefaultMDirectoryActionPerformed

    private void chbxSongDeletionConfirmationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbxSongDeletionConfirmationActionPerformed
    {//GEN-HEADEREND:event_chbxSongDeletionConfirmationActionPerformed
    }//GEN-LAST:event_chbxSongDeletionConfirmationActionPerformed

    /**
     * Button that lets the user change his/her default directory for music.
     *
     * @param evt
     */
    private void btnSelectDirectoryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSelectDirectoryActionPerformed
    {//GEN-HEADEREND:event_btnSelectDirectoryActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose a default directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
        {
            txtDefaultMDirectory.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnSelectDirectoryActionPerformed

    /**
     * De-selects chbxSongDeletionConfirmationHDDNo if selected. This is to
     * prevent 2 opposites from being selected simultaneously.
     *
     * @param evt
     */
    private void chbxSongDeletionConfirmationHDDYesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbxSongDeletionConfirmationHDDYesActionPerformed
    {//GEN-HEADEREND:event_chbxSongDeletionConfirmationHDDYesActionPerformed
        if (chbxSongDeletionConfirmationHDDNo.isSelected())
        {
            chbxSongDeletionConfirmationHDDNo.setSelected(false);
        }
    }//GEN-LAST:event_chbxSongDeletionConfirmationHDDYesActionPerformed

    private void chbxSongDeletionConfirmationItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_chbxSongDeletionConfirmationItemStateChanged
    {//GEN-HEADEREND:event_chbxSongDeletionConfirmationItemStateChanged
    }//GEN-LAST:event_chbxSongDeletionConfirmationItemStateChanged

    /**
     * Checkbox that enables the subchoices it has if enabled, and disables them
     * if it is disabled.
     *
     * @param evt
     */
    private void chbxSongDeletionConfirmationStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_chbxSongDeletionConfirmationStateChanged
    {//GEN-HEADEREND:event_chbxSongDeletionConfirmationStateChanged
        //setup automatically "yes" to delete from HDD.
        if (chbxSongDeletionConfirmation.isSelected())
        {
            chbxSongDeletionConfirmationHDDYes.setEnabled(true);
        }
        else
        {
            chbxSongDeletionConfirmationHDDYes.setEnabled(false);
            chbxSongDeletionConfirmationHDDYes.setSelected(false);
        }
        //setup automatically "no" to delete from HDD.
        if (chbxSongDeletionConfirmation.isSelected())
        {
            chbxSongDeletionConfirmationHDDNo.setEnabled(true);
        }
        else
        {
            chbxSongDeletionConfirmationHDDNo.setEnabled(false);
            chbxSongDeletionConfirmationHDDNo.setSelected(false);
        }
    }//GEN-LAST:event_chbxSongDeletionConfirmationStateChanged

    /**
     * De-selects chbxSongDeletionConfirmationHDDYes if selected. This is to
     * prevent 2 opposites from being selected simultaneously.
     *
     * @param evt
     */
    private void chbxSongDeletionConfirmationHDDNoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbxSongDeletionConfirmationHDDNoActionPerformed
    {//GEN-HEADEREND:event_chbxSongDeletionConfirmationHDDNoActionPerformed
        if (chbxSongDeletionConfirmationHDDYes.isSelected())
        {
            chbxSongDeletionConfirmationHDDYes.setSelected(false);
        }
    }//GEN-LAST:event_chbxSongDeletionConfirmationHDDNoActionPerformed

    private void chbxSynchronizeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbxSynchronizeActionPerformed
    {//GEN-HEADEREND:event_chbxSynchronizeActionPerformed
        if (chbxSynchronize.isSelected())
        {
            JOptionPane.showMessageDialog(null, "- Please note -"
                    + "\nAuto synchronizing will only detect"
                    + "\nchanges occuring while the program is running."
                    + "\nTo fully synchronize changes that happened while"
                    + "\nthe program was not running, please use the"
                    + "\nsynchronize button in the main part of the program.", "Please note", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_chbxSynchronizeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSelectDirectory;
    private javax.swing.JCheckBox chbxSongDeletionConfirmation;
    private javax.swing.JCheckBox chbxSongDeletionConfirmationHDDNo;
    private javax.swing.JCheckBox chbxSongDeletionConfirmationHDDYes;
    private javax.swing.JCheckBox chbxSynchronize;
    private javax.swing.JCheckBox chbxWindowStartup;
    private javax.swing.JLabel lblDefaultDirectory;
    private javax.swing.JLabel lblMusicSettings;
    private javax.swing.JLabel lblOption4;
    private javax.swing.JLabel lblOption5;
    private javax.swing.JLabel lblProgramStartup;
    private javax.swing.JLabel lblSongDeletion;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JTextField txtDefaultMDirectory;
    // End of variables declaration//GEN-END:variables
}
